datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
  // Add directUrl for migrations when using connection pooling
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  // Add previewFeatures for better serverless support
  previewFeatures = ["metrics"]
}

model User {
  id                   String    @id @default(uuid())
  email                String    @unique
  name                 String?
  passwordHash         String
  hasLifetimeCredentials Boolean  @default(false)
  lifetimeCredentials  Json?     // Stores encrypted credentials
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now()) @updatedAt
  bookings             Booking[]
  accounts            Account[]
  sessions            Session[]
  emailVerified       DateTime?
  image               String?
}

model Booking {
  id          String   @id @default(uuid())
  userId      String
  sessionId   String
  title       String
  date        String
  time        String
  location    String?
  status      String?
  reference   String?
  bookedAt    DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

